import { type NextPage } from "next";
import Head from "next/head";
import Link from "next/link";
import React, { useEffect, useLayoutEffect, useRef, useState } from "react";

type Point = {
  id: number;
  x: number;
  y: number;
};

type DotProps = {
  point: Point;
  rect: DOMRect;
};

const Home: NextPage = () => {
  const [points, setPoints] = useState<Point[]>([]);
  const [rect, setRect] = useState<DOMRect>();
  const canvasRef = useRef<HTMLDivElement>(null);

  useLayoutEffect(() => {
    if (!canvasRef.current) return;

    setRect(canvasRef.current.getBoundingClientRect());
  }, [canvasRef.current]);

  const translateToOrigin = (x: number, y: number, rect: DOMRect) => {
    let newX = Math.round(x - (rect.left + rect.width / 2));
    let newY = Math.round(y - (rect.top + rect.height / 2));
    return { x: newX, y: newY };
  };

  const handleClick = (e: React.MouseEvent<HTMLDivElement>) => {
    let rect = e.currentTarget.getBoundingClientRect();
    const newPoint = {
      ...translateToOrigin(e.pageX, e.pageY, rect),
      id: points.length,
    };
    setPoints((current) => [...current, newPoint]);
  };
  return (
    <>
      <Head>
        <title>Create T3 App</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="min-w-screen flex min-h-screen">
        <div className="shadow-2x z-10 w-48  bg-[hsl(191,19%,16%)] p-6 text-lg text-white shadow-amber-200">
          Classifier
          <button className="rounded bg-[hsl(205,26%,49%)] py-2 px-4 font-bold text-white hover:bg-[hsl(205,26%,25%)]">
            TRAIN!
          </button>
        </div>
        <div
          className=" relative flex grow items-center justify-center overflow-hidden bg-[#1f2725]"
          ref={canvasRef}
          onClick={handleClick}
        >
          <div className="absolute h-[1px] min-w-full bg-white"></div>
          <div className="absolute min-h-full w-[1px] bg-white"></div>
          {rect &&
            points.map((point) => {
              return <Dot point={point} rect={rect} key={point.id} />;
            })}
        </div>
      </main>
    </>
  );
};

const Dot: React.FC<DotProps> = ({ point, rect }) => {
  const translateFromCoord = () => {
    const newX = point.x + rect.width / 2;
    const newY = point.y + rect.height / 2;

    // let newX = Math.round(point.x - (rect.left + rect.width / 2));
    // let newY = Math.round(point.y - (rect.top + rect.height / 2));
    return { x: newX, y: newY };
  };
  const { x, y } = translateFromCoord();
  return (
    <div
      className="absolute h-2 w-2 rounded-full border-2 border-solid border-red-600 bg-black"
      style={{ top: `${y - 4}px`, left: `${x - 4}px` }}
    />
  );
};
{
  /* <div className="container flex flex-col items-center justify-center gap-12 px-4 py-16 ">
<h1 className="text-5xl font-extrabold tracking-tight text-white sm:text-[5rem]">
  Create <span className="text-[hsl(280,100%,70%)]">T3</span> App
</h1>
<div className="grid grid-cols-1 gap-4 sm:grid-cols-2 md:gap-8">
  <Link
    className="flex max-w-xs flex-col gap-4 rounded-xl bg-white/10 p-4 text-white hover:bg-white/20"
    href="https://create.t3.gg/en/usage/first-steps"
  >
    <h3 className="text-2xl font-bold">First Steps →</h3>
    <div className="text-lg">
      Just the basics - Everything you need to know to set up your
      database and authentication.
    </div>
  </Link>
  <Link
    className="flex max-w-xs flex-col gap-4 rounded-xl bg-white/10 p-4 text-white hover:bg-white/20"
    href="https://create.t3.gg/en/introduction"
  >
    <h3 className="text-2xl font-bold">Documentation →</h3>
    <div className="text-lg">
      Learn more about Create T3 App, the libraries it uses, and how
      to deploy it.
    </div>
  </Link>
</div>
</div> */
}

export default Home;
