import { type NextPage } from "next";
import Head from "next/head";
import Link from "next/link";
import Sidebar from "../../components/Sidebar";
import React, { useEffect, useLayoutEffect, useRef, useState } from "react";

type Point = {
  id: number;
  x: number;
  y: number;
  trained: boolean;
  type: number;
};

type Line = {
  visible: boolean;
  greaterThan?: boolean;
  x1?: number;
  y1?: number;
  x2?: number;
  y2?: number;
};

type DotProps = {
  point: Point;
  rect: DOMRect;
};

const Home: NextPage = () => {
  const [points, setPoints] = useState<Point[]>([]);
  const [rect, setRect] = useState<DOMRect>();
  const [boundary, setBoundary] = useState<Line>();
  const [pointsRemaining, setPointsRemaining] = useState(0);
  const [makingBound, setMakingBound] = useState<boolean>(false);

  const canvasRef = useRef<HTMLDivElement>(null);

  useLayoutEffect(() => {
    if (!canvasRef.current) return;

    setRect(canvasRef.current.getBoundingClientRect());
  }, [canvasRef.current]);

  const translateToOrigin = (x: number, y: number, rect: DOMRect) => {
    let newX = Math.round(x - (rect.left + rect.width / 2));
    let newY = Math.round(y - (rect.top + rect.height / 2));
    return { x: newX, y: newY };
  };

  const handleSetBounds = () => {
    setPointsRemaining(2);
    setMakingBound(true);
  };

  const handleClick = (e: React.MouseEvent<HTMLDivElement>) => {
    let rect = e.currentTarget.getBoundingClientRect();
    const coords = translateToOrigin(e.pageX, e.pageY, rect);
    if (makingBound) {
      if (pointsRemaining == 1) setMakingBound(false);
      setPointsRemaining((current) => current - 1);
    } else {
      const newPoint = {
        ...coords,
        id: points.length,
        trained: false,
        type: 0,
      };
      setPoints((current) => [...current, newPoint]);
    }
  };

  const handleTrain = async () => {
    function sleep(ms: number) {
      return new Promise((resolve) => setTimeout(resolve, ms));
    }
    let promise = Promise.resolve();
    points.forEach(async (point) => {
      promise = promise.then(function () {
        console.log("test");
        setPoints((current) => {
          return current.map((tPoint) => {
            if (tPoint.id == point.id) {
              return { ...point, trained: true };
            }
            return tPoint;
          });
        });
        return new Promise(function (resolve) {
          setTimeout(resolve, 20);
        });
      });
    });
  };

  return (
    <>
      <Head>
        <title>2D Classifier</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="min-w-screen flex min-h-screen">
        <Sidebar handleSetBounds={handleSetBounds} handleTrain={handleTrain} />
        <div
          className=" relative flex grow items-center justify-center overflow-hidden bg-[#1f2725]"
          ref={canvasRef}
          onClick={handleClick}
          style={{
            backgroundColor: `${makingBound ? "hsl(191,19%,32%)" : "#1f2725"}`,
          }}
        >
          {makingBound && (
            <p className="absolute bottom-4 right-4 z-20 font-bold text-white">
              Click Two areas to make a line
            </p>
          )}
          <div className="absolute h-[1px] min-w-full bg-white"></div>
          <div className="absolute min-h-full w-[1px] bg-white"></div>
          {/* <div
            className="absolute min-h-[2000px] min-w-[9999px] border-b-4 border-solid border-red-700 bg-[hsla(202,37%,46%,.4)]"
            style={{ bottom: "20px", transform: "rotate(20deg)" }}
          ></div> */}
          {rect &&
            points.map((point) => {
              return <Dot point={point} rect={rect} key={point.id} />;
            })}
        </div>
      </main>
    </>
  );
};

const Dot: React.FC<DotProps> = ({ point, rect }) => {
  const translateFromCoord = () => {
    const newX = point.x + rect.width / 2;
    const newY = point.y + rect.height / 2;

    // let newX = Math.round(point.x - (rect.left + rect.width / 2));
    // let newY = Math.round(point.y - (rect.top + rect.height / 2));
    return { x: newX, y: newY };
  };
  const { x, y } = translateFromCoord();
  const borderColor = point.type ? "#519694" : "#C22D30";
  const backgroundColor = point.trained ? "#FFFFFF" : "#000000";
  if (point.trained) {
    return (
      <div
        className="absolute h-2 w-2 animate-[ping_0.2s_cubic-bezier(0,0,0.2,1)_1] rounded-full border-2 border-solid"
        style={{
          top: `${y - 4}px`,
          left: `${x - 4}px`,
          borderColor: borderColor,
          backgroundColor: backgroundColor,
        }}
      />
    );
  }
  return (
    <div
      className="absolute h-2 w-2 rounded-full border-2 border-solid"
      style={{
        top: `${y - 4}px`,
        left: `${x - 4}px`,
        borderColor: borderColor,
        backgroundColor: backgroundColor,
      }}
    />
  );
};
{
}

export default Home;
